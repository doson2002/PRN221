@page
@model RazorPage_Web.Pages.Admin.Orders.CreateModel
@{
    ViewData["Title"] = "Create Order";
}
<style>
    .product-details {
        display: flex;
        background-color: #808080; /* Màu xám */
        padding: 20px;
        gap: 20px; /* Khoảng cách giữa các thành phần */
    }

    .product-image-container {
        flex: 1; /* Chiếm 1 phần của không gian có sẵn */
    }

    .product-info {
        flex: 2; /* Chiếm 2 phần của không gian có sẵn, thông tin sản phẩm sẽ rộng hơn ảnh */
        display: flex;
        flex-direction: column;
        justify-content: center; /* Căn giữa các thông tin theo chiều dọc */
    }

    .product-image {
        width: 100%; /* Chiều rộng tối đa trong container của nó */
        height: auto; /* Tỉ lệ chiều cao tự động theo chiều rộng */
    }

    .add-to-cart-btn {
        margin-top: 10px; /* Khoảng cách phía trên nút */
    }

    #voucherSection {
        background-color: #f5f5f5; /* Màu xám mờ */
        padding: 20px;
        border-radius: 5px;
    }

    #customerResults {
        margin-top: 10px; /* Thêm khoảng cách phía trên */
        padding: 5px; /* Thêm padding cho mỗi kết quả */
        border: 1px solid #ccc; /* Đường viền xung quanh kết quả */
        background-color: #f9f9f9; /* Màu nền cho kết quả */
        list-style: none; /* Xóa các dấu đầu dòng mặc định */
    }

        #customerResults li {
            margin-bottom: 5px; /* Khoảng cách giữa các mục */
            padding: 5px; /* Padding cho mỗi mục */
            border: 1px solid #ddd; /* Đường viền cho mỗi mục */
            background-color: #fff; /* Màu nền cho mỗi mục */
        }

            #customerResults li:hover {
                background-color: #e1e1e1; /* Màu nền khi hover */
            }

    #productResults {
        margin-top: 10px; /* Thêm khoảng cách phía trên */
        padding: 5px; /* Thêm padding cho mỗi kết quả */
        border: 1px solid #ccc; /* Đường viền xung quanh kết quả */
        background-color: #f9f9f9; /* Màu nền cho kết quả */
        list-style: none; /* Xóa các dấu đầu dòng mặc định */
    }

        #productResults li {
            margin-bottom: 5px; /* Khoảng cách giữa các mục */
            padding: 5px; /* Padding cho mỗi mục */
            border: 1px solid #ddd; /* Đường viền cho mỗi mục */
            background-color: #fff; /* Màu nền cho mỗi mục */
        }

            #productResults li:hover {
                background-color: #e1e1e1; /* Màu nền khi hover */
            }

    .form-inline {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

        .form-inline .form-control {
            flex-grow: 1;
            margin-right: 10px;
        }


    #promotionResults {
        margin-top: 10px; /* Thêm khoảng cách phía trên */
        padding: 5px; /* Thêm padding cho mỗi kết quả */
        border: 1px solid #ccc; /* Đường viền xung quanh kết quả */
        background-color: #f9f9f9; /* Màu nền cho kết quả */
        list-style: none; /* Xóa các dấu đầu dòng mặc định */
    }

        #promotionResults li {
            margin-bottom: 5px; /* Khoảng cách giữa các mục */
            padding: 5px; /* Padding cho mỗi mục */
            border: 1px solid #ddd; /* Đường viền cho mỗi mục */
            background-color: #fff; /* Màu nền cho mỗi mục */
        }

            #promotionResults li:hover {
                background-color: #e1e1e1; /* Màu nền khi hover */
            }


    #promotionCode {
        width: 50%; /* Giả sử nút chiếm 120px */
        flex-grow: 0; /* Đảm bảo rằng input không tự động mở rộng theo nội dung */
        margin-right: 10px;
    }

    #applyPromotionBtn {
        width: 110px; /* Chiều rộng cố định cho nút */
    }
    
</style>

<div class="container mt-5">
    <h1>@ViewData["OrderType"]</h1>

    <form id="myForm" method="post">
        <!-- Hidden input for storing the selected customer ID -->
        <input type="hidden" name="productIds[index]" value="ID">
        <input type="hidden" name="quantities[index]" value="Quantity">

        <input type="hidden" id="customerId" name="customerId" value="">
        <input type="hidden" id="promotionId" name="promotionId" value="">

        <input type="hidden" id="discountInput" name="discount" value="0" />


        @if (Model.Type == "sell")
        {
            <div class="row">
                <div class="col-6">
                    <div class="form-group">
                        <label style="font-size: 23px; color: red;" for="searchCustomer">Customer Information</label>
                        <input type="text" class="form-control" id="searchCustomer" name="searchCustomer" placeholder="Input Customer Phone">
                        <ul class="list-group" id="customerResults"></ul>
                    </div>
                </div>
            </div>

            <div id="selectedCustomer" class="d-none">
                <h4>Selected Customer</h4>
                <p id="customerInfo"></p>
            </div>


            <div class="row">
                <div class="col-6">
                    <div class="form-group">
                        <label style="font-size: 23px; color: blue;" for="searchProduct">Product: </label>
                        <input type="text" class="form-control" id="searchProduct" name="searchProduct" placeholder="Search Product by Barcode">
                        <ul class="list-group" id="productResults"></ul>

                        <div id="selectedProduct" class="d-none product-details">
                            <div class="product-image-container">
                                <img id="productImage" class="product-image" src="" alt="Product Image">
                            </div>
                            <div class="product-info">
                                <p id="productName"></p>
                                <p id="productBarcode"></p>
                                <p id="productPrice"></p>
                                <p id="productType"></p>
                                <button type="button" id="addToCartBtn" class="add-to-cart-btn">Add to cart</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>


            <div id="cartInformation" class="mt-5">
                <h4>Cart Information</h4>
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">No.</th>
                            <th scope="col">Product Name</th>
                            <th scope="col">Type</th>
                            <th scope="col">Price</th>
                            <th scope="col">Quantity</th>
                            <th scope="col">Total</th>
                            <th scope="col">Action</th>
                        </tr>
                    </thead>
                    <tbody id="cartItems">
                  
                    </tbody>
                </table>
            </div>

            <div id="voucherSection" class="mt-5">
                <h4>Apply Voucher</h4>
                <div class="form-group form-inline">
                    <label for="promotionCode">Enter Voucher Code</label>
                    <input type="text" class="form-control" id="promotionCode" name="promotionCode">
                    <button type="button" class="btn btn-primary" id="applyPromotionBtn">Apply Voucher</button>
                </div>
                <ul class="list-group" id="promotionResults"></ul>

                <!-- Div để hiển thị thông tin Promotion -->
                <div id="selectedPromotionInfo" class="mt-3 d-none">
                    <p id="selectedPromotionMessage"></p>
                    <p id="selectedPromotionDetails"></p>
                </div>
            </div>

        }
        <!-- Container cho dữ liệu sản phẩm được thêm bằng JavaScript -->
        <div id="productData"></div>

        <div class="totals">
            <div class="line-item">
                <span>Provisional:</span>
                <span id="provisionalTotal">0 VND</span>
            </div>
            <div class="line-item">
                <span>Total Discount:</span>
                <span id="discountAmount">0 VND</span>
            </div>
            <div class="line-item">
                <span>Total:</span>
                <span id="totalAmount">0 VND</span>
            </div>
        </div>

        <button type="submit" class="btn btn-primary">Submit</button>
    </form>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script>
        var cart = [];
        var itemNo = 1;
        $(document).ready(function () {
           

//select Customer 
            $('#searchCustomer').on('input', function () {
                var phoneNumber = $(this).val();
                if (phoneNumber.length > 2) {
                    $.get('@Url.Page("/Admin/Orders/Create", new { handler = "SearchCustomers" })', { phone: phoneNumber }, function (data) {
                        $('#customerResults').empty();
                        data.forEach(function (customer) {
                            $('#customerResults').append('<li class="list-group-item" data-id="' + customer.id + '">' + customer.fullName + ' (' + customer.phoneNumber + ')</li>');
                        });
                    });
                } else {
                    $('#customerResults').empty();
                }
            });
            $(document).on('click', '#customerResults .list-group-item', function () {
                var customerId = $(this).data('id');
                $('#customerId').val(customerId); // Set the customer ID in the hidden input

                $.get('@Url.Page("/Admin/Orders/Create", new { handler = "CustomerDetails" })', { customerId: customerId }, function (data) {
                    if (data.success) {
                        var customer = data.customer;
                        $('#selectedCustomer').removeClass('d-none');
                        let customerInfo = `
                            <b> Customer Name:</b> ${customer.fullName}
                            <br>
                            <b> Email:</b> ${customer.email}
                            <br>
                            <b> Phone:</b> ${customer.phoneNumber}
                            <br>
                            <b> Address: </b>${customer.address}
                            <br>
                            <b> Point: </b>${customer.accumulated_point}
                        `;
                        $('#customerInfo').html(customerInfo);
                    } else {
                        $('#selectedCustomer').addClass('d-none');
                        $('#customerInfo').text('');
                        alert(data.message);
                    }
                });

                $('#customerResults').empty();
                $('#searchCustomer').val('');
            });

            $('#searchProduct').on('input', function () {
                var barcode = $(this).val();
                if (barcode.length > 2) {
                    $.get('@Url.Page("/Admin/Orders/Create", new { handler = "SearchProducts" })', { barcode: barcode }, function (data) {
                        $('#productResults').empty();
                        data.forEach(function (product) {
                            $('#productResults').append('<li class="list-group-item" data-id="' + product.id + '">' + product.productName +  '</li>');
                        });
                    });
                } else {
                    $('#productResults').empty();
                }
            });

            $(document).on('click', '#productResults .list-group-item', function () {
                var productId = $(this).data('id');

                $.get('@Url.Page("/Admin/Orders/Create", new { handler = "ProductDetails" })', { productId: productId }, function (data) {
                if (data.success !== false) {
                    $('#selectedProduct').removeClass('d-none');
                    $('#productImage').attr('src', data.imageUrl);
                    $('#productName').text("Product name: " + data.productName);
                    $('#productBarcode').text("Barcode: " + data.barcode);
                    $('#productType').text("Type: " + data.type); // Assuming you fetch type as well
                    $('#productResults').empty();
                    $('#searchProduct').val('');

                        // Move the price fetching here
                        $.get('@Url.Page("/Admin/Orders/Create", new { handler = "CalculatePrice" })', { productId: productId }, function (priceData) {
                            if (priceData.success) {
                                $('#productPrice').text("Price: " + priceData.price.toLocaleString());
                                $('#addToCartBtn').data('product', {
                                    id: productId,
                                    name: data.productName,
                                    price: priceData.price,
                                    type: data.type,
                                    stock: data.quantity
                                });
                            } else {
                                alert('Error: ' + priceData.message);
                            }
                        });

                    } else {
                        alert(data.message);
                    }
                });
            });

            $('#addToCartBtn').on('click', function () {
                event.preventDefault(); // Ngăn chặn hành động mặc định của form
                var product = $(this).data('product');

                // Kiểm tra số lượng sản phẩm trước khi thêm vào giỏ hàng
                if (product.stock > 0) {
                    var quantity = 1; // Mặc định số lượng là 1
                    console.log("Cart before adding", cart);
                    addToCart(product, quantity); // Thêm sản phẩm vào giỏ hàng
                    console.log("Cart after adding", cart);
                } else {
                    alert("Sản phẩm đã hết hàng.");
                }
                  
            });

            function addToCart(product, quantity) {
                var cartItem = {
                    id: product.id,
                    no: itemNo++,
                    name: product.name,
                    type: product.type, // Chỉnh sửa nếu cần thiết
                    price: product.price,
                    quantity: quantity,
                    total: product.price * quantity
                };

                cart.push(cartItem);
                console.log("cart: ", cart);


                $('#cartItems').append(`
            <tr data-id="${product.id}">
                <td>${cartItem.no}</td>
                <td>${cartItem.name}</td>
                <td>${cartItem.type}</td>
                <td>$${cartItem.price.toFixed(2)}</td>
                <td><input type="number" min="1" value="${cartItem.quantity}" class="form-control cartQuantity"></td>
                <td>$${cartItem.total.toFixed(2)}</td>
                <td><button type="button" class="btn btn-danger btn-sm deleteCartItem">Delete</button></td>
            </tr>
        `);
                console.log("Added product: ", product.name);

                $('#selectedProduct').addClass('d-none');
                $('#productInfo').text('');

                // Cập nhật lại số thứ tự (No.)
                updateItemNumbers();

                // Tính lại tổng tiền khi số lượng thay đổi
                calculateTotal();

                // Reset dữ liệu sản phẩm đã chọn
                resetSelectedProduct();
            }

            $(document).on('input', '.cartQuantity', function () {
                var productRow = $(this).closest('tr');
                var productId = productRow.data('id');
                var newQuantity = parseInt($(this).val());
                var price = parseFloat(productRow.find('td:eq(3)').text().replace('$', ''));
                var total = newQuantity * price;

                productRow.find('td:eq(5)').text('$' + total.toFixed(2));

                var product = cart.find(item => item.id === productId);
                if (product) {
                    product.quantity = newQuantity;
                    product.total = total;
                }

                // Tính lại tổng tiền khi số lượng thay đổi
                calculateTotal();
            });

            $(document).on('click', '.deleteCartItem', function () {
                var rowIndex = $(this).closest('tr').index();
                cart.splice(rowIndex, 1);
                $(this).closest('tr').remove();

                // Cập nhật lại số thứ tự (No.)
                updateItemNumbers();

                // Tính lại tổng tiền khi xóa sản phẩm
                calculateTotal();
            });

            function updateItemNumbers() {
                $('#cartItems tbody tr').each(function (index) {
                    $(this).find('td:first').text(index + 1);
                });
            }

            function calculateTotal() {
                var total = 0;
                cart.forEach(function (item) {
                    total += item.price * item.quantity;
                });
                console.log("Tổng tính được từ mảng: ", total);
                $('#cartTotal').text('$' + total.toFixed(2));
                return total; // Trả về giá trị tổng cộng để có thể sử dụng ở nơi khác
            }

            function resetSelectedProduct() {
                $('#searchProduct').val('');
                $('#productResults').empty();
                $('#selectedProduct').addClass('d-none');
                $('#productInfo').text('');
            }

            //Add Promotion
            $('#promotionCode').on('input', function () {
                var promotionCode = $(this).val();
                if (promotionCode.length > 1) {
                    $.get('@Url.Page("/Admin/Orders/Create", new { handler = "SearchPromotions" })', { promotionCode: promotionCode }, function (data) {
                        $('#promotionResults').empty();
                        data.forEach(function (promotion) {
                            $('#promotionResults').append('<li class="list-group-item" data-id="' + promotion.id + '">' + promotion.code + '</li>');
                        });
                    });
                } else {
                    $('#promotionResults').empty();
                }
            });

            $(document).on('click', '#promotionResults .list-group-item', function () {
                var promotionId = $(this).data('id');
                $('#promotionId').val(promotionId); // Set the customer ID in the hidden input

                $.get('@Url.Page("/Admin/Orders/Create", new { handler = "PromotionDetails" })', { promotionId: promotionId }, function (data) {
                    if (data) {
                        $('#selectedPromotionInfo').removeClass('d-none');
                        $('#selectedPromotionMessage').text('Selected Promotion: ' + data.code);
                        var promotionDetails = 'Discount: ' + data.discountPercentage*100 + '%';
                        if (data.fixedDiscountAmount > 0) {
                            promotionDetails += ', Fixed Discount: $' + data.fixedDiscountAmount.toFixed(2) + 'VND';
                        }
                        $('#selectedPromotionDetails').text(promotionDetails);

                        // Store the promotion data for later use when applying the promotion
                        $('#applyPromotionBtn').data('promotion', {
                            id: promotionId,
                            code: data.code,
                            discountPercentage: data.discountPercentage,
                            fixedDiscountAmount: data.fixedDiscountAmount
                        });
                    }
                });

                $('#promotionResults').empty();
                $('#promotionCode').val('');
            });

            $('#applyPromotionBtn').on('click', function () {
                var promotion = $('#applyPromotionBtn').data('promotion');
                if (!promotion) {
                    $('#selectedPromotionMessage').text('No promotion selected');
                    $('#selectedPromotionDetails').text('');
                    return;
                }

                var provisionalTotal = calculateTotal(); // Use the improved calculateTotal function
                var discountPercentage = promotion.discountPercentage; // Convert percentage to decimal
                var fixedDiscount = promotion.fixedDiscountAmount;
                var discountAmount = (provisionalTotal * discountPercentage) + fixedDiscount;
                var totalAfterDiscount = provisionalTotal - discountAmount;

                // Update the UI with the calculated totals
                $('#selectedPromotionMessage').text('Promotion applied successfully');

                // Display the updated totals in the respective elements
                document.getElementById('provisionalTotal').textContent = `${provisionalTotal.toFixed(2)} VND`;
                document.getElementById('discountAmount').textContent = `${discountAmount.toFixed(2)} VND`;
                document.getElementById('totalAmount').textContent = `${totalAfterDiscount.toFixed(2)} VND`;

                // Cập nhật giá trị cho input hidden
                $('#discountInput').val(discountAmount.toFixed(2));
            });
        });


        //submit form
        $('#myForm').submit(function (e) {
            e.preventDefault(); // Prevent the default form submission
            var form = $(this); // Ensure it's a jQuery object
            $('#productData').empty(); // Clear previous inputs
            console.log("Submitting the following products and quantities:");

            cart.forEach(function (item, index) {
                
                $('#productData').append('<input type="hidden" name="productIds[' + index + ']" value="' + item.id + '">');
                $('#productData').append('<input type="hidden" name="quantities[' + index + ']" value="' + item.quantity + '">');
                console.log(`Product ID ${item.id}: Quantity ${item.quantity}`);
            });

            form.off('submit').submit(); // Unbind the submit event handler and submit the form
        });

    </script>
}