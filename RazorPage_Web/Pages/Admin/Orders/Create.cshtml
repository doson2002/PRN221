@page
@model RazorPage_Web.Pages.Admin.Orders.CreateModel
@{
    ViewData["Title"] = "Create Order";
}
<style>
    .product-details {
        display: flex;
        background-color: #808080; /* Màu xám */
        padding: 20px;
        gap: 20px; /* Khoảng cách giữa các thành phần */
    }

    .product-image-container {
        flex: 1; /* Chiếm 1 phần của không gian có sẵn */
    }

    .product-info {
        flex: 2; /* Chiếm 2 phần của không gian có sẵn, thông tin sản phẩm sẽ rộng hơn ảnh */
        display: flex;
        flex-direction: column;
        justify-content: center; /* Căn giữa các thông tin theo chiều dọc */
    }

    .product-image {
        width: 100%; /* Chiều rộng tối đa trong container của nó */
        height: auto; /* Tỉ lệ chiều cao tự động theo chiều rộng */
    }

    .add-to-cart-btn {
        margin-top: 10px; /* Khoảng cách phía trên nút */
    }

    #voucherSection {
        background-color: #f5f5f5; /* Màu xám mờ */
        padding: 20px;
        border-radius: 5px;
    }

    #customerResults {
        margin-top: 10px; /* Thêm khoảng cách phía trên */
        padding: 5px; /* Thêm padding cho mỗi kết quả */
        border: 1px solid #ccc; /* Đường viền xung quanh kết quả */
        background-color: #f9f9f9; /* Màu nền cho kết quả */
        list-style: none; /* Xóa các dấu đầu dòng mặc định */
    }

        #customerResults li {
            margin-bottom: 5px; /* Khoảng cách giữa các mục */
            padding: 5px; /* Padding cho mỗi mục */
            border: 1px solid #ddd; /* Đường viền cho mỗi mục */
            background-color: #fff; /* Màu nền cho mỗi mục */
        }

            #customerResults li:hover {
                background-color: #e1e1e1; /* Màu nền khi hover */
            }

    #productResults {
        margin-top: 10px; /* Thêm khoảng cách phía trên */
        padding: 5px; /* Thêm padding cho mỗi kết quả */
        border: 1px solid #ccc; /* Đường viền xung quanh kết quả */
        background-color: #f9f9f9; /* Màu nền cho kết quả */
        list-style: none; /* Xóa các dấu đầu dòng mặc định */
    }

        #productResults li {
            margin-bottom: 5px; /* Khoảng cách giữa các mục */
            padding: 5px; /* Padding cho mỗi mục */
            border: 1px solid #ddd; /* Đường viền cho mỗi mục */
            background-color: #fff; /* Màu nền cho mỗi mục */
        }

            #productResults li:hover {
                background-color: #e1e1e1; /* Màu nền khi hover */
            }

    .form-inline {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

        .form-inline .form-control {
            flex-grow: 1;
            margin-right: 10px;
        }


    #promotionResults {
        margin-top: 10px; /* Thêm khoảng cách phía trên */
        padding: 5px; /* Thêm padding cho mỗi kết quả */
        border: 1px solid #ccc; /* Đường viền xung quanh kết quả */
        background-color: #f9f9f9; /* Màu nền cho kết quả */
        list-style: none; /* Xóa các dấu đầu dòng mặc định */
    }

        #promotionResults li {
            margin-bottom: 5px; /* Khoảng cách giữa các mục */
            padding: 5px; /* Padding cho mỗi mục */
            border: 1px solid #ddd; /* Đường viền cho mỗi mục */
            background-color: #fff; /* Màu nền cho mỗi mục */
        }

            #promotionResults li:hover {
                background-color: #e1e1e1; /* Màu nền khi hover */
            }


    #promotionCode {
        width: 50%; /* Giả sử nút chiếm 120px */
        flex-grow: 0; /* Đảm bảo rằng input không tự động mở rộng theo nội dung */
        margin-right: 10px;
    }

    #applyPromotionBtn {
        width: 110px; /* Chiều rộng cố định cho nút */
    }
    
    /* Bo tròn cho bảng */
    .table {
        border-collapse: separate;
        border-spacing: 0;
        border: 1px solid #333;
        border-radius: 10px;
        overflow: hidden;
    }

        /* Bo tròn cho phần tiêu đề của bảng */
        .table thead {
            background-color: #333;
            color: white;
            border-radius: 10px 10px 0 0;
        }

        .table th:first-child {
            border-top-left-radius: 10px;
        }

        .table th:last-child {
            border-top-right-radius: 10px;
        }

        .table tbody tr:last-child td:first-child {
            border-bottom-left-radius: 10px;
        }

        .table tbody tr:last-child td:last-child {
            border-bottom-right-radius: 10px;
        }
    /* Đặt tất cả nội dung vào một khung */
    .container {
        border: 1px solid #ccc; /* Đường viền màu xám nhạt */
        padding: 20px;
        border-radius: 10px;
        background-color: #e0e0e0; /* Màu nền xám */
    }

    /* Kiểu chữ cho các dòng chữ Provisional, Total Discount, Total */
    .label {
        font-weight: bold;
        font-size: 16px;
        color: #333; /* Màu chữ đậm để dễ nhìn */
    }

    /* Dòng item */
    .line-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
    }
</style>
<h1 class ="text-center mb-5">@ViewData["OrderType"]</h1>

@if (Model.Type == "purchase")
{
    <input type="text" class="form-control" id="searchOrder" name="searchOrder" placeholder="Input OrderID">
    <ul class="list-group" id="orderResults"></ul>

    <div class="table-responsive">
        <table id="orderDetailsTable" class="table">
            <thead>
                <tr>
                    <th>OrderDetail ID</th>
                    <th>Product ID</th>
                    <th>Barcode</th>
                    <th>Quantity</th>
                    <th>Unit Price</th>
                </tr>
            </thead>
            <tbody>
                <!-- Order details will be added here dynamically -->
            </tbody>
        </table>
    </div>
}
<div class="row">
    <div class="col-4">
        <div class="form-group">
            <label style="font-size: 23px; color: red;" for="searchCustomer">Customer Information</label>
            <input type="text" class="form-control" id="searchCustomer" name="searchCustomer" placeholder="Input Customer Phone">
            <ul class="list-group" id="customerResults"></ul>
        </div>
    </div>
</div>

<div id="selectedCustomer" class="d-none">
    <h4>Selected Customer</h4>
    <p id="customerInfo"></p>
</div>

<div class="container mt-5">
    <!-- Form để tìm kiếm sản phẩm -->
    <div class="row mb-3">
        <div class="col-12">
            <form class="form-inline" method="get" action="/Admin/Orders/Create">
                <div class="input-group">
                    <label style="font-size: 23px; color: red; margin-right: 15px;" for="searchBarcode">Products List</label>
                    <input type="text" id="searchBarcode" name="searchBarcode" class="form-control" placeholder="Search by Barcode" value="@Model.SearchBarcode" />
                    <div class="input-group-append">
                        <button type="submit" class="btn btn-primary">Search</button>
                    </div>
                </div>
            </form>
        </div>
    </div>

<div class="row">
    <div class="col-12">
        <table class="table table-striped">
            <thead style="background-color: #333; color: white;">
                <tr>
                    <th>Image</th>
                    <th>Name</th>
                    <th>Barcode</th>
                    <th>Quantity</th>
                    <th>Type</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody id="productTableBody">
                @foreach (var product in Model.ProductDetails)
                {
                    <tr>
                        <td>
                            <img src="@product.ImageUrl" alt="@product.ProductName" class="img-thumbnail" style="max-width: 100px;">
                        </td>
                        <td>@product.ProductName</td>
                        <td>@product.Barcode</td>
                        <td>@product.Quantity</td>
                        <td>@product.Type</td>
                        <td>
                            <button type="button" class="btn btn-primary add-to-cart-btn"
                                    data-id="@product.Id"
                                    data-name="@product.ProductName"
                                    data-type="@product.Type"
                                    data-stock="@product.Quantity">
                                Add to cart
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <nav aria-label="Page navigation">
            <ul class="pagination">
                <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                    <a class="page-link" href="?currentPage=@(Model.CurrentPage - 1)" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link" href="?currentPage=@i">@i</a>
                    </li>
                }
                <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                    <a class="page-link" href="?currentPage=@(Model.CurrentPage + 1)" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            </ul>
        </nav>
    </div>
    </div>

</div>

<div class="container mt-5">

    <form id="myForm" method="post">
        <!-- Hidden input for storing the selected customer ID -->
        <input type="hidden" name="productIds[index]" value="ID">
        <input type="hidden" name="quantities[index]" value="Quantity">

        <input type="hidden" id="customerId" name="customerId" value="">
        <input type="hidden" id="promotionId" name="promotionId" value="">

        <input type="hidden" id="discountInput" name="discount" value="0" />

        <input type="hidden" id="type" name="type" value="@Model.Type" />


        <div id="cartInformation" class="mt-5">
            <h4>Cart Information</h4>
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">No.</th>
                        <th scope="col">Product Name</th>
                        <th scope="col">Type</th>
                        <th scope="col">Price</th>
                        <th scope="col">Quantity</th>
                        <th scope="col">Total</th>
                        <th scope="col">Action</th>
                    </tr>
                </thead>
                <tbody id="cartItems">
                </tbody>
            </table>
        </div>
        @if (Model.Type == "sell")
        {
                <div id="voucherSection" class="mt-5 container">
                    <h4>Apply Voucher</h4>
                    <div class="form-group form-inline">
                        <label for="promotionCode">Enter Voucher Code</label>
                        <input type="text" class="form-control" id="promotionCode" name="promotionCode">
                        <button type="button" class="btn btn-primary" id="applyPromotionBtn">Apply Voucher</button>
                    </div>
                    <ul class="list-group" id="promotionResults"></ul>

                    <!-- Div để hiển thị thông tin Promotion -->
                    <div id="selectedPromotionInfo" class="mt-3 d-none">
                        <p id="selectedPromotionMessage"></p>
                        <p id="selectedPromotionDetails"></p>
                    </div>

                <!-- Add Policies Section -->
                <div id="addPoliciesSection" class="mt-5">
                    <button type="button" class="btn btn-secondary" id="sendPoliciesBtn" data-toggle="modal" data-target="#policyModal">Send Policy</button>
                    <button type="button" class="btn btn-success" id="addPolicyBtn" data-toggle="modal" data-target="#addPolicyModal">Add Policy</button>

                </div>

                <!-- Modal -->
                <div class="modal fade" id="policyModal" tabindex="-1" role="dialog" aria-labelledby="policyModalLabel" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="policyModalLabel">Send Request</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                                <div id="policyForm" class="modal-body">
                                    <div class="form-group">
                                        <label for="description">Description</label>
                                        <textarea class="form-control" id="description" name="description" rows="3"></textarea>
                                    </div>
                                    <div class="form-group">
                                        <label>Discount Type</label><br>
                                        <div class="form-check form-check-inline">
                                            <input class="form-check-input" type="radio" name="discountType" id="percentageDiscount" value="percentage">
                                            <label class="form-check-label" for="percentageDiscount">Percentage Discount</label>
                                        </div>
                                        <div class="form-check form-check-inline">
                                            <input class="form-check-input" type="radio" name="discountType" id="fixedDiscount" value="fixed">
                                            <label class="form-check-label" for="fixedDiscount">Fixed Discount Amount</label>
                                        </div>
                                    </div>
                                    <div class="form-group" id="percentageInput" style="display: none;">
                                        <label for="percentage">Discount Percentage</label>
                                        <input type="number" class="form-control" id="percentage" name="percentage">
                                    </div>

                                    <div class="form-group" id="fixedInput" style="display: none;">
                                        <label for="fixedAmount">Discount Amount</label>
                                        <input type="number" class="form-control" id="fixedAmount" name="fixedAmount">
                                    </div>

                                    <div class="form-group">
                                        <label for="validFrom">Valid From</label>
                                        <input type="date" class="form-control" id="validFrom" name="validFrom">
                                    </div>
                                    <div class="form-group">
                                        <label for="validTo">Valid To</label>
                                        <input type="date" class="form-control" id="validTo" name="validTo">
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                                    <button type="button" class="btn btn-primary" id="submitPolicyBtn">Send</button>
                                </div>
                        </div>
                    </div>
                </div>

                <!-- Add Policy Modal -->
                <div class="modal fade" id="addPolicyModal" tabindex="-1" role="dialog" aria-labelledby="addPolicyModalLabel" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="addPolicyModalLabel">Select Customer Policy</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                
                                    <!-- Customer policies will be loaded here -->
                                    <div id="customerPolicies" style="max-height: 400px; overflow-y: auto;">
                                        @for (int i = 0; i < Model.CustomerPolicies.Count; i++)
                                        {
                                            DateTime currentDate = DateTime.Now;
                                            DateTime validTo = Model.CustomerPolicies[i].ValidTo;

                                            bool isExpired = currentDate > validTo;

                                            <div class="policy-item mb-3">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <div>
                                                        <strong>Discount:</strong>
                                                        <span>
                                                            @if (Model.CustomerPolicies[i].FixedDiscountAmount != null)
                                                            {
                                                                @Model.CustomerPolicies[i].FixedDiscountAmount.Value.ToString("N0")
                                                                @:VNĐ
                                                            }
                                                            else if (Model.CustomerPolicies[i].DiscountRate != null)
                                                            {
                                                                @Model.CustomerPolicies[i].DiscountRate.ToString()
                                                                @:%
                                                            }
                                                        </span>
                                                    </div>
                                                    @if (!isExpired)
                                                    {
                                                        <button type="button" class="btn btn-dark applyPolicyBtn" data-policy-id="@Model.CustomerPolicies[i].Id">Apply</button>
                                                    }
                                                    else
                                                    {
                                                        <button type="button" class="btn btn-light" disabled>Expired</button>
                                                    }
                                                </div>
                                                <div>
                                                    <strong>Valid From:</strong> @Model.CustomerPolicies[i].ValidFrom.ToShortDateString() - <strong>Valid To:</strong> @Model.CustomerPolicies[i].ValidTo.ToShortDateString()
                                                </div>
                                            </div>
                                        }
                                        @if (!Model.CustomerPolicies.Any())
                                        {
                                            <p>No customer policies found.</p>
                                        }
                                    </div>
                               
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>


                    <!-- Container cho dữ liệu sản phẩm được thêm bằng JavaScript -->
                    <div id="productData"></div>

                    <div class="totals mt-5">
                        <div class="line-item">
                            <span class="label">Provisional:</span>
                            <span id="provisionalTotal">0 VND</span>
                        </div>
                        <div class="line-item">
                            <span class="label">Total Discount:</span>
                            <span id="discountAmount">0 VND</span>
                        </div>
                        <div class="line-item">
                            <span class="label">Total:</span>
                            <span id="totalAmount">0 VND</span>
                        </div>
                    </div>
                </div>

          

        }
        else if (Model.Type == "purchase")
        {
            <!-- Container cho dữ liệu sản phẩm được thêm bằng JavaScript -->
            <div id="productData"></div>
            <div class="card p-3">
                <h4 class="card-title">Set Purchase Rate</h4>
                <div class="form-inline">
                    <div class="form-group mb-2">
                        <label for="purchaseRateInput" class="sr-only">Purchase Rate (%)</label>
                        <input type="number" class="form-control" id="purchaseRateInput" placeholder="Enter Purchase Rate" style="width: 150px;">
                    </div>
                    <button type="button" class="btn btn-primary mb-2" id="applyPurchaseRateBtn">Apply</button>
                </div>
            </div>
            <div class="totals">
                <div class="line-item">
                    <span>Purchase Rate:</span>
                    <span id="purchaseRate">0%</span> <!-- Assuming you want to display some rate here -->
                </div>
                <div class="line-item">
                    <span>Total:</span>
                    <span id="totalAmount">0 VND</span>
                </div>
            </div>

            

        }
        <div id="paymentOptions">
            <label for="paymentMethod">Choose a payment method:</label>
            <select id="paymentMethod" name="paymentMethod">
                <option value="cash">Cash</option>
                <option value="momo">MoMo QR Code</option>
            </select>
        </div>

        <!-- Hidden input để lưu giá trị paymentMethod -->
        <input type="hidden" id="hiddenPaymentMethod" name="paymentMethod" value="">


        <button type="submit" class="btn btn-primary">Submit Order</button>
    </form>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script>
        var cart = [];
        var itemNo = 1;
        var Model = {
            Type: '@Model.Type'
        };
        $(document).ready(function () {

            // Load cart from local storage on page load
            var savedCart = localStorage.getItem('cart');
            if (savedCart) {
                cart = JSON.parse(savedCart);
                itemNo = cart.length + 1;

                cart.forEach(function (item) {
                    $('#cartItems').append(`
                    <tr data-id="${item.id}">
                        <td>${item.no}</td>
                        <td>${item.name}</td>
                        <td>${item.type}</td>
                        <td>$${item.price.toFixed(2)}</td>
                        <td><input type="number" min="1" max="${item.stock}+1" value="${item.quantity}" class="form-control cartQuantity"></td>
                        <td>$${item.total.toFixed(2)}</td>
                        <td><button type="button" class="btn btn-danger btn-sm deleteCartItem">Delete</button></td>
                    </tr>
                    `);
                });

                // Update item numbers and total price
                updateItemNumbers();
                calculateTotal();
            }

            // Khôi phục thông tin khách hàng từ localStorage khi trang được tải lại
            var savedCustomer = localStorage.getItem('selectedCustomer');
            if (savedCustomer) {
                var customer = JSON.parse(savedCustomer);
                $('#customerId').val(customer.id); // Set the customer ID in the hidden input
                $('#selectedCustomer').removeClass('d-none');
                let customerInfo = `
                    <b> Customer Name:</b> ${customer.fullName}
                    <br>
                    <b> Email:</b> ${customer.email}
                    <br>
                    <b> Phone:</b> ${customer.phoneNumber}
                    <br>
                    <b> Address: </b>${customer.address}
                    <br>
                    <b> Point: </b>${customer.accumulated_point}
                `;
                $('#customerInfo').html(customerInfo);
            }
                // Search order
                $('#searchOrder').on('input', function () {
                    var orderId = $(this).val();
                    if (orderId.length > 0) {
                        $.get('@Url.Page("/Admin/Orders/Create", new { handler = "SearchOrders" })', { orderID: orderId }, function (data) {
                            $('#orderResults').empty();
                            data.forEach(function (order) {
                                $('#orderResults').append('<li class="list-group-item" data-id="' + order.id + '">' + order.fullName + ' (' + order.date + ')</li>');
                            });
                        });
                    } else {
                        $('#orderResults').empty();
                    }
                });

                $(document).on('click', '#orderResults .list-group-item', function () {
                    var orderId = $(this).data('id');

                    $('#orderID').val(orderId); // Store selected order ID

                    // Fetch order details
                    $.get('@Url.Page("/Admin/Orders/Create", new { handler = "OrderDetails" })', { orderID: orderId }, function (data) {
                        if (data.success) {
                            $('#orderDetailsTable tbody').empty();
                            data.orderDetails.forEach(function (detail) {
                                var row = '<tr>' +
                                    '<td>' + detail.id + '</td>' +
                                    '<td>' + detail.productID + '</td>' +
                                    '<td>' + detail.barcode + '</td>' +
                                    '<td>' + detail.quantity + '</td>' +
                                    '<td>' + detail.unitPrice + '</td>' +
                                    '</tr>';
                                $('#orderDetailsTable tbody').append(row);
                            });

                            // Extract productIds from orderDetails
                            var productIds = data.orderDetails.map(function (detail) {
                                return detail.productID;
                            });
                            // Log productIds to console
                            console.log('Product IDs:', productIds);

                            // Fetch related products
                            loadProducts(productIds);

                        } else {
                            $('#orderDetailsTable tbody').empty();
                            var row = '<tr><td colspan="5">No order details found</td></tr>';
                            $('#orderDetailsTable tbody').append(row);
                            alert(data.message);
                        }
                    });

                    $('#orderResults').empty();
                    $('#searchOrder').val('');
                });

                // Function to load products
                function loadProducts(productIds) {
                    console.log('Loading products for productIds:', productIds); // Log before sending request
                    var url = '@Url.Page("/Admin/Orders/Create", new { handler = "OnGetAsync" })';
                    var queryParams = { currentPage: 1, productIds: productIds };
                    console.log('Request URL:', url, 'with query params:', queryParams);
                    $.get(url, queryParams, function (products) {
                        console.log('Products loaded:', products); // Log the loaded products
                        displayProducts(products);
                    });
                }

                // Function to display products
                function displayProducts(products) {
                console.log('Type of products:', typeof products);
                    $('#productTableBody').empty(); // Clear old rows in the table

                    if (Array.isArray(products) && products.length > 0) {
                        products.forEach(function (product) {
                            var row = '<tr>' +
                                '<td><img src="' + product.imageUrl + '" alt="' + product.productName + '" class="img-thumbnail" style="max-width: 100px;"></td>' +
                                '<td>' + product.productName + '</td>' +
                                '<td>' + product.barcode + '</td>' +
                                '<td>' + product.quantity + '</td>' +
                                '<td>' + product.type + '</td>' +
                                '<td><button type="button" class="btn btn-primary add-to-cart-btn" data-id="' + product.id + '" data-name="' + product.productName + '" data-type="' + product.type + '" data-stock="' + product.quantity + '">Add to cart</button></td>' +
                                '</tr>';
                            $('#productTableBody').append(row);
                        });
                    } else {
                        var row = '<tr><td colspan="6">No products found</td></tr>';
                        $('#productTableBody').append(row);
                    }
                }

                // Search order
                $('#searchCustomer').on('input', function () {
                    var phone = $(this).val();
                    if (phone.length > 0) {
                        $.get('@Url.Page("/Admin/Orders/Create", new { handler = "SearchCustomers" })', { phone: phone }, function (data) {
                            $('#customerResults').empty();
                            data.forEach(function (customer) {
                                $('#customerResults').append('<li class="list-group-item" data-id="' + customer.id + '">' + customer.fullName + ' (' + customer.phoneNumber + ')</li>');
                            });
                        });
                    } else {
                        $('#customerResults').empty();
                    }
                });

            $(document).on('click', '#customerResults .list-group-item', function () {
                var customerId = $(this).data('id');
                $('#customerId').val(customerId); // Set the customer ID in the hidden input

                $.get('@Url.Page("/Admin/Orders/Create", new { handler = "CustomerDetails" })', { customerId: customerId }, function (data) {
                    if (data.success) {
                        var customer = data.customer;
                        $('#selectedCustomer').removeClass('d-none');
                        let customerInfo = `
                                    <b> Customer Name:</b> ${customer.fullName}
                                    <br>
                                    <b> Email:</b> ${customer.email}
                                    <br>
                                    <b> Phone:</b> ${customer.phoneNumber}
                                    <br>
                                    <b> Address: </b>${customer.address}
                                    <br>
                                    <b> Point: </b>${customer.accumulated_point}
                                `;
                        $('#customerInfo').html(customerInfo);
                        // Lưu thông tin khách hàng vào localStorage
                        localStorage.setItem('selectedCustomer', JSON.stringify(customer));
                    } else {
                        $('#selectedCustomer').addClass('d-none');
                        $('#customerInfo').text('');
                        alert(data.message);
                    }
                });

                $('#customerResults').empty();
                $('#searchCustomer').val('');
            });
          

           
            // Xử lý sự kiện click cho nút Add to cart
            $(document).on('click', '.add-to-cart-btn', function () {
                event.preventDefault(); // Ngăn chặn hành động mặc định của form

                var product = {
                    id: $(this).data('id'),
                    name: $(this).data('name'),
                    type: $(this).data('type'),
                    stock: $(this).data('stock')
                };

                if (Model.Type == "sell") {
                    // Kiểm tra số lượng sản phẩm trước khi thêm vào giỏ hàng
                    if (product.stock > 0) {
                        var quantity = 1; // Mặc định số lượng là 1

                        // Gửi yêu cầu AJAX để tính giá sản phẩm dựa trên productId
                        $.get('@Url.Page("/Admin/Orders/Create", new { handler = "CalculatePrice" })', { productId: product.id }, function (priceData) {
                            if (priceData.success) {
                                var price = priceData.price; // Lấy giá sản phẩm từ kết quả trả về

                                addToCart(product, quantity, price); // Thêm sản phẩm vào giỏ hàng với giá tính được
                            } else {
                                alert('Error: ' + priceData.message);
                            }
                        });
                    } else {
                        alert("Sản phẩm đã hết hàng.");
                    }
                } else if (Model.Type == "purchase") {
                    var quantity = 1; // Mặc định số lượng là 1
                    // Gửi yêu cầu AJAX để tính giá sản phẩm dựa trên productId
                    $.get('@Url.Page("/Admin/Orders/Create", new { handler = "CalculatePrice" })', { productId: product.id }, function (priceData) {
                        if (priceData.success) {
                            var price = priceData.price; // Lấy giá sản phẩm từ kết quả trả về

                            addToCart(product, quantity, price); // Thêm sản phẩm vào giỏ hàng với giá tính được
                        } else {
                            alert('Error: ' + priceData.message);
                        }
                    });
                }
            });

            function addToCart(product, quantity, price) {
                var cartItem = {
                    id: product.id,
                    no: itemNo++,
                    name: product.name,
                    type: product.type,
                    price: price,// Sử dụng giá sản phẩm đã tính được
                    quantity: quantity,
                    total: price * quantity,
                    stock: product.stock
                };

                cart.push(cartItem);
                console.log("cart: ", cart);
                // Save cart to local storage
                localStorage.setItem('cart', JSON.stringify(cart));

                // Thêm vào bảng cartItems
                $('#cartItems').append(`
                <tr data-id="${product.id}">
                    <td>${cartItem.no}</td>
                    <td>${cartItem.name}</td>
                    <td>${cartItem.type}</td>
                    <td>$${cartItem.price.toFixed(2)}</td>
                    <td><input type="number" min="1" max="${cartItem.stock}+1" value="${cartItem.quantity}" class="form-control cartQuantity"></td>
                    <td>$${cartItem.total.toFixed(2)}</td>
                    <td><button type="button" class="btn btn-danger btn-sm deleteCartItem">Delete</button></td>
                </tr>
            `);

               
                console.log("Added product: ", product.name);

                // Cập nhật lại số thứ tự (No.) cho cartItems và cartInformation
                updateItemNumbers();

                // Tính lại tổng tiền khi số lượng thay đổi
                calculateTotal();

                // Reset dữ liệu sản phẩm đã chọn
                resetSelectedProduct();
            }

            $(document).on('input', '.cartQuantity', function () {
                var productRow = $(this).closest('tr');
                var productId = productRow.data('id');
                var newQuantity = parseInt($(this).val());
                var price = parseFloat(productRow.find('td:eq(3)').text().replace('$', ''));
                var total = newQuantity * price;

                productRow.find('td:eq(5)').text('$' + total.toFixed(2));

                var product = cart.find(item => item.id === productId);

                if (product) {
                    if (Model.Type == "sell") {
                        if (newQuantity > product.stock) {
                            alert('Số lượng sản phẩm không thể vượt quá tồn kho!');
                            $(this).val(product.quantity); // Đặt lại số lượng cũ
                            return; // Dừng xử lý thêm nếu số lượng không hợp lệ

                        }
                    }

                    product.quantity = newQuantity;
                    product.total = total;
                }

                // Tính lại tổng tiền khi số lượng thay đổi
                calculateTotal(); 

               
            });

            $(document).on('click', '.deleteCartItem', function () {
                var rowIndex = $(this).closest('tr').index();
                cart.splice(rowIndex, 1);
                $(this).closest('tr').remove();

                // Cập nhật lại số thứ tự (No.)
                updateItemNumbers();

                // Tính lại tổng tiền khi xóa sản phẩm
                calculateTotal();

                // Cập nhật lại localStorage
                localStorage.setItem('cart', JSON.stringify(cart));
            });

            function updateItemNumbers() {
                $('#cartItems tbody tr').each(function (index) {
                    $(this).find('td:first').text(index + 1);
                });
            }

            function calculateTotal() {
                var total = 0;
                cart.forEach(function (item) {
                    total += item.price * item.quantity;
                });
                console.log("Tổng tính được từ mảng: ", total);
                $('#cartTotal').text('$' + total.toFixed(2));
                return total; // Trả về giá trị tổng cộng để có thể sử dụng ở nơi khác
            }

            function resetSelectedProduct() {
                $('#searchProduct').val('');
                $('#productResults').empty();
            }

            //Add Promotion
            $('#promotionCode').on('input', function () {
                var promotionCode = $(this).val();
                if (promotionCode.length > 1) {
                    $.get('@Url.Page("/Admin/Orders/Create", new { handler = "SearchPromotions" })', { promotionCode: promotionCode }, function (data) {
                        $('#promotionResults').empty();
                        data.forEach(function (promotion) {
                            $('#promotionResults').append('<li class="list-group-item" data-id="' + promotion.id + '">' + promotion.code + '</li>');
                        });
                    });
                } else {
                    $('#promotionResults').empty();
                }
            });

            $(document).on('click', '#promotionResults .list-group-item', function () {
                var promotionId = $(this).data('id');
                $('#promotionId').val(promotionId); // Set the customer ID in the hidden input

                $.get('@Url.Page("/Admin/Orders/Create", new { handler = "PromotionDetails" })', { promotionId: promotionId }, function (data) {
                    if (data) {
                        $('#selectedPromotionInfo').removeClass('d-none');
                        $('#selectedPromotionMessage').text('Selected Promotion: ' + data.code);
                        var promotionDetails = 'Discount: ' + data.discountPercentage * 100 + '%';
                        if (data.fixedDiscountAmount > 0) {
                            promotionDetails += ', Fixed Discount: $' + data.fixedDiscountAmount.toFixed(2) + 'VND';
                        }
                        $('#selectedPromotionDetails').text(promotionDetails);

                        // Store the promotion data for later use when applying the promotion
                        $('#applyPromotionBtn').data('promotion', {
                            id: promotionId,
                            code: data.code,
                            discountPercentage: data.discountPercentage,
                            fixedDiscountAmount: data.fixedDiscountAmount
                        });
                    }
                });

                $('#promotionResults').empty();
                $('#promotionCode').val('');
            });

            $('#applyPromotionBtn').on('click', function () {
                var promotion = $('#applyPromotionBtn').data('promotion');
                if (!promotion) {
                    $('#selectedPromotionMessage').text('No promotion selected');
                    $('#selectedPromotionDetails').text('');
                    return;
                }

                var provisionalTotal = calculateTotal(); // Use the improved calculateTotal function
                var discountPercentage = promotion.discountPercentage; // Convert percentage to decimal
                var fixedDiscount = promotion.fixedDiscountAmount;
                var discountAmount = (provisionalTotal * discountPercentage) + fixedDiscount;
                var totalAfterDiscount = provisionalTotal - discountAmount;

                // Update the UI with the calculated totals
                $('#selectedPromotionMessage').text('Promotion applied successfully');

                // Display the updated totals in the respective elements
                document.getElementById('provisionalTotal').textContent = `${provisionalTotal.toFixed(2)} VND`;
                document.getElementById('discountAmount').textContent = `${discountAmount.toFixed(2)} VND`;
                document.getElementById('totalAmount').textContent = `${totalAfterDiscount.toFixed(2)} VND`;

                // Cập nhật giá trị cho input hidden
                $('#discountInput').val(discountAmount.toFixed(2));
            });

            $('#applyPurchaseRateBtn').on('click', function () {
                // Retrieve the purchase rate from input
                var purchaseRate = parseFloat($('#purchaseRateInput').val());

                // Validate the purchase rate
                if (isNaN(purchaseRate) || purchaseRate <= 0) {
                    alert('Please enter a valid purchase rate.');
                    return;
                }

                // Convert percentage to decimal for calculation
                var rateDecimal = purchaseRate / 100;


                // Assuming 'totalAmount' holds the initial total from which the rate is applied
                var totalBeforeRate = calculateTotal(); // Use the improved calculateTotal function
                var discountAmount = totalBeforeRate * rateDecimal;


                // Calculate new total after applying the purchase rate
                var totalAfterRate = totalBeforeRate * rateDecimal;

                // Update the UI with the calculated totals
                $('#purchaseRate').text(`${purchaseRate.toFixed(2)}%`);
                $('#totalAmount').text(`${totalAfterRate.toFixed(2)} VND`);

                // Cập nhật giá trị cho input hidden
                $('#discountInput').val(discountAmount.toFixed(2));
            });

            document.querySelectorAll('.applyPolicyBtn').forEach(button => {
                button.addEventListener('click', function () {
                    let policyId = this.getAttribute('data-policy-id');
                    applyPolicy(policyId);
                });
            });

            function applyPolicy(policyId) {
                $.ajax({
                    type: "GET",
                    url: "/Admin/Orders/Create?handler=GetPolicy",
                    data: { policyId: policyId },
                    success: function (response) {
                        if (response.success) {
                            let policy = response.policy;
                            applyDiscount(policy);
                           
                            // Close modal or hide form (adjust as per your implementation)
                            $('#addPolicyModal').modal('hide');

                            $('#addPolicyModal').on('hidden.bs.modal', function () {
                                $('.modal-backdrop').remove(); // Xóa backdrop khi modal ẩn đi
                            });
                        } else {
                            console.error(response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching policy:', error);
                    }
                });
            }

            function applyDiscount(policy) {
                console.log('Customer policy:', policy);

                var provisionalTotal = calculateTotal(); // Use the improved calculateTotal function
                var discountPercentage = policy.discountRate; // Convert percentage to decimal
                var fixedDiscount = policy.fixedDiscountAmount;
                var discountAmount = (provisionalTotal * discountPercentage / 100) + fixedDiscount;
                var totalAfterDiscount = provisionalTotal - discountAmount;

                console.log('Discount Rate:', discountPercentage);
                console.log('Provisional Total:', provisionalTotal);
                // Display the updated totals in the respective elements
                document.getElementById('provisionalTotal').textContent = `${provisionalTotal.toFixed(2)} VND`;
                document.getElementById('discountAmount').textContent = `${discountAmount.toFixed(2)} VND`;
                document.getElementById('totalAmount').textContent = `${totalAfterDiscount.toFixed(2)} VND`;

              
                return 0;
            }




        });


        //submit form
        $('#myForm').submit(function (e) {
            e.preventDefault(); // Prevent the default form submission
            var form = $(this); // Ensure it's a jQuery object
            $('#productData').empty(); // Clear previous inputs
            console.log("Submitting the following products and quantities:");

            cart.forEach(function (item, index) {

                $('#productData').append('<input type="hidden" name="productIds[' + index + ']" value="' + item.id + '">');
                $('#productData').append('<input type="hidden" name="quantities[' + index + ']" value="' + item.quantity + '">');
                console.log(`Product ID ${item.id}: Quantity ${item.quantity}`);
            });

            // Lấy giá trị của lựa chọn thanh toán từ dropdown
            var paymentMethod = $('#paymentMethod').val();

            // Đặt giá trị của hidden input
            $('#hiddenPaymentMethod').val(paymentMethod);

            form.off('submit').submit(); // Unbind the submit event handler and submit the form
        });

        document.addEventListener('DOMContentLoaded', function () {
            const percentageRadio = document.getElementById('percentageDiscount');
            const fixedRadio = document.getElementById('fixedDiscount');
            const percentageInput = document.getElementById('percentageInput');
            const fixedInput = document.getElementById('fixedInput');
            const submitPolicyBtn = document.getElementById('submitPolicyBtn');

            percentageRadio.addEventListener('change', function () {
                if (percentageRadio.checked) {
                    percentageInput.style.display = 'block';
                    fixedInput.style.display = 'none';
                }
            });

            fixedRadio.addEventListener('change', function () {
                if (fixedRadio.checked) {
                    fixedInput.style.display = 'block';
                    percentageInput.style.display = 'none';
                }
            });

            submitPolicyBtn.addEventListener('click', function () {
                const description = document.getElementById('description').value;
                const discountType = document.querySelector('input[name="discountType"]:checked').value;
                const percentage = document.getElementById('percentage').value;
                const fixedAmount = document.getElementById('fixedAmount').value;
                const validFrom = document.getElementById('validFrom').value;
                const validTo = document.getElementById('validTo').value;

                const data = {
                    description: description,
                    discountRate: percentage,
                    fixedDiscountAmount: fixedAmount,
                    validFrom: validFrom,
                    validTo: validTo
                };

                fetch('/Admin/CustomerPolicies/Index', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(data)
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Success:', data);
                        $('#policyModal').modal('hide');
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
            });
            $('#policyModal').on('hidden.bs.modal', function () {
                $('.modal-backdrop').remove(); // Xóa backdrop khi modal ẩn đi
            });
        });


    </script>
}